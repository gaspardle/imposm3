package mssqlclrgeo

import (
	"bytes"
	"encoding/hex"
	"testing"
)

func TestWkbToUdtGeo(t *testing.T) {
	values := []struct {
		description  string
		wkb          string
		expected_udt string
	}{
		{"POINT (20 40), 4326",
			"0101000020E610000000000000000034400000000000004440",
			"E6100000010C00000000000034400000000000004440"},

		{"LINESTRING (1 2, 4 8), 4326",
			"0102000020E610000002000000000000000000F03F000000000000004000000000000010400000000000002040",
			"E61000000114000000000000F03F000000000000004000000000000010400000000000002040"},

		{"POLYGON((-122.358 47.653 , -122.348 47.649, -122.348 47.658, -122.358 47.658, -122.358 47.653)) 4326",
			"0103000020E61000000100000005000000F4FDD478E9965EC0DD24068195D3474083C0CAA145965EC0508D976E12D3474083C0CAA145965EC04E62105839D44740F4FDD478E9965EC04E62105839D44740F4FDD478E9965EC0DD24068195D34740",
			"E6100000010405000000F4FDD478E9965EC0DD24068195D3474083C0CAA145965EC0508D976E12D3474083C0CAA145965EC04E62105839D44740F4FDD478E9965EC04E62105839D44740F4FDD478E9965EC0DD24068195D3474001000000020000000001000000FFFFFFFF0000000003"},

		{"POLYGON((-20 -20, -20 20, 20 20, 20 -20, -20 -20), (10 0, 0 10, 0 -10, 10 0)) 4326",
			"0103000020E6100000020000000500000000000000000034C000000000000034C000000000000034C0000000000000344000000000000034400000000000003440000000000000344000000000000034C000000000000034C000000000000034C0040000000000000000002440000000000000000000000000000000000000000000002440000000000000000000000000000024C000000000000024400000000000000000",
			"E610000001040900000000000000000034C000000000000034C000000000000034C0000000000000344000000000000034400000000000003440000000000000344000000000000034C000000000000034C000000000000034C00000000000002440000000000000000000000000000000000000000000002440000000000000000000000000000024C000000000000024400000000000000000020000000200000000000500000001000000FFFFFFFF0000000003"},

		{"MULTIPOINT(3 5, 4 8, 8 7) 4326",
			"0104000020E610000003000000010100000000000000000008400000000000001440010100000000000000000010400000000000002040010100000000000000000020400000000000001C40",
			"E6100000010403000000000000000000084000000000000014400000000000001040000000000000204000000000000020400000000000001C400300000001000000000101000000010200000004000000FFFFFFFF0000000004000000000000000001000000000100000001000000000200000001"},

		{"MULTILINESTRING((3 4,10 50,20 25),(-5 -8,-10 -8,-15 -4))",
			"0105000020E61000000200000001020000000300000000000000000008400000000000001040000000000000244000000000000049400000000000003440000000000000394001020000000300000000000000000014C000000000000020C000000000000024C000000000000020C00000000000002EC000000000000010C0",
			"E610000001040600000000000000000008400000000000001040000000000000244000000000000049400000000000003440000000000000394000000000000014C000000000000020C000000000000024C000000000000020C00000000000002EC000000000000010C0020000000100000000010300000003000000FFFFFFFF0000000005000000000000000002000000000100000002"},

		{"MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)),((20 35, 10 30, 10 10, 30 5, 45 20, 20 35),(30 20, 20 15, 20 25, 30 20)))",
			
			},

		{"GEOMETRYCOLLECTION(LINESTRING(4 6,7 10),POINT(4 6))",
			"0107000020E610000002000000010200000002000000000000000000104000000000000018400000000000001C400000000000002440010100000000000000000010400000000000001840",
			"E6100000010403000000000000000000104000000000000018400000000000001C40000000000000244000000000000010400000000000001840020000000100000000010200000003000000FFFFFFFF0000000007000000000000000002000000000100000001"},

		{"CIRCULARSTRING(0 0, 1 1, 1 0)",
			"0108000020E61000000300000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F0000000000000000",
			"E610000002040300000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000000001000000020000000001000000FFFFFFFF0000000008"},

		{"COMPOUNDCURVE(CIRCULARSTRING(1 0, 0 1, -1 0), (-1 0, 2 0)) 4326",
			"0109000020E610000002000000010800000003000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF0000000000000000010200000002000000000000000000F0BF000000000000000000000000000000400000000000000000",
			"E6100000020404000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF00000000000000000000000000000040000000000000000001000000030000000001000000FFFFFFFF0000000009020000000302"},

		{"CURVEPOLYGON(CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3)) 4326",
			"010A000020E610000001000000010800000005000000000000000000F03F00000000000008400000000000000840000000000000144000000000000010400000000000001C400000000000001C400000000000000840000000000000F03F0000000000000840",
			"E6100000020405000000000000000000F03F00000000000008400000000000000840000000000000144000000000000010400000000000001C400000000000001C400000000000000840000000000000F03F000000000000084001000000020000000001000000FFFFFFFF000000000A"},
	}
	for _, v := range values {
		wkb, _ := hex.DecodeString(v.wkb)
		expected_udt, _ := hex.DecodeString(v.expected_udt)

		udt, err := WkbToUdtGeo(wkb)
		if err != nil {
			t.Error(err)
		}

		if !bytes.Equal(udt, expected_udt) {
			t.Errorf("%s \ngot:      %s \nexpected: %s", v.description, hex.EncodeToString(udt), hex.EncodeToString(expected_udt))
		}

	}
}
